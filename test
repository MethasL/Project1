import serial
import time

SERIAL_PORT = 'COM6'
BAUD_RATE = 9600
TIMEOUT = 1
MACHINE_RUNTIME = 10  # seconds

def calculate_bcc(data_bytes):
    bcc = 0
    for b in data_bytes:
        bcc ^= b
    return bcc

def build_command(command_bytes):
    length = len(command_bytes)
    full_command = [0x01, length] + command_bytes
    bcc = calculate_bcc(full_command[1:])
    full_command.append(bcc)
    return bytes(full_command)

def parse_response(data):
    if len(data) < 4:
        return None
    start = data[0]
    length = data[1]
    payload = data[2:-1]
    bcc = data[-1]
    if calculate_bcc(data[1:-1]) != bcc:
        return None

    try:
        ascii_str = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in payload)
        reversed_ascii = ascii_str[::-1]
        return reversed_ascii
    except Exception:
        return None

def main():
    try:
        with serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=TIMEOUT) as ser:
            print(f"Connected to {SERIAL_PORT} at {BAUD_RATE} baud")
            command = build_command([0x08, 0xC8])  # 200 ms burst

            while True:
                input_uid = input("🔐 Enter a UID to display (optional): ").strip().upper()
                if input_uid:
                    print(f"📌 You entered UID: {input_uid}")

                machine_running = False
                machine_end_time = 0

                while True:
                    now = time.time()

                    if machine_running and now >= machine_end_time:
                        print("🛑 Machine finished working.")
                        break  # Go back to UID input

                    if not machine_running:
                        ser.write(command)
                        time.sleep(0.1)

                        if ser.in_waiting:
                            data = ser.read(ser.in_waiting)
                            tag = parse_response(data)

                            if tag:
                                if tag == ".":
                                    continue

                                print(f"Tag detected (Reversed ASCII): {tag}")
                                print("✅ Machine started!")
                                machine_running = True
                                machine_end_time = now + MACHINE_RUNTIME

                    time.sleep(0.4)

    except serial.SerialException as e:
        print(f"Serial error: {e}")
    except KeyboardInterrupt:
        print("\nStopped by user.")

if __name__ == "__main__":
    main()
