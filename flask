from flask import Flask, render_template_string, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
import threading
import time
import serial
import os

app = Flask(__name__)

# Configuration
SERIAL_PORT = 'COM6'
BAUD_RATE = 9600
TIMEOUT = 1
MACHINE_RUNTIME = 10  # seconds

# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///rfid_log.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Shared state
app.config['confirmed_uid'] = None
app.config['machine_running'] = False
app.config['machine_end_time'] = 0
app.config['last_tag'] = None
app.config['pending_tag'] = None
app.config['pending_timestamp'] = None

# Database model
class RFIDLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    tag_id = db.Column(db.String(100))
    timestamp = db.Column(db.String(100))
    user_id = db.Column(db.String(100))

# Create database tables
with app.app_context():
    db.create_all()

# Helper functions
def calculate_bcc(data_bytes):
    bcc = 0
    for b in data_bytes:
        bcc ^= b
    return bcc

def build_command(command_bytes):
    length = len(command_bytes)
    full_command = [0x01, length] + command_bytes
    bcc = calculate_bcc(full_command[1:])
    full_command.append(bcc)
    return bytes(full_command)

def parse_response(data):
    if len(data) < 4:
        return None
    payload = data[2:-1]
    bcc = data[-1]
    if calculate_bcc(data[1:-1]) != bcc:
        return None
    try:
        ascii_str = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in payload)
        reversed_ascii = ascii_str[::-1]
        return reversed_ascii
    except Exception:
        return None

def serial_loop():
    try:
        with serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=TIMEOUT) as ser:
            command = build_command([0x08, 0xC8])
            while True:
                if app.config['confirmed_uid'] and not app.config['machine_running'] and not app.config['pending_tag']:
                    ser.write(command)
                    time.sleep(0.1)
                    if ser.in_waiting:
                        data = ser.read(ser.in_waiting)
                        tag = parse_response(data)
                        if tag and tag != "." and tag != app.config['last_tag']:
                            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
                            app.config['pending_tag'] = tag
                            app.config['pending_timestamp'] = timestamp
                elif app.config['machine_running']:
                    if time.time() >= app.config['machine_end_time']:
                        app.config['machine_running'] = False
                        app.config['confirmed_uid'] = None
                        app.config['last_tag'] = None
                time.sleep(0.4)
    except Exception as e:
        print(f"Serial error: {e}")

# Start serial thread
threading.Thread(target=serial_loop, daemon=True).start()

# HTML template
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>RFID Monitor</title>
    {% if confirmed_uid %}
    <meta http-equiv="refresh" content="3">
    {% endif %}
</head>
<body>
    <h2>RFID Tag Monitor</h2>
    {% if not confirmed_uid %}
    <form method="post" action="/set_uid">
        <label>Enter User ID:</label>
        <input type="text" name="uid" required>
        <input type="submit" value="Confirm UID">
    </form>
    {% else %}
    <p><strong>Monitoring for UID:</strong> {{ confirmed_uid }}</p>
    {% endif %}

    {% if pending_tag %}
    <form method="post" action="/confirm_tag">
        <p><strong>Tag Detected:</strong> {{ pending_tag }}</p>
        <label>Confirm start?</label>
        <input type="submit" name="confirm" value="Yes">
        <input type="submit" name="confirm" value="No">
    </form>
    {% endif %}

    <h3>Status: {{ status }}</h3>
    <h3>Tag History</h3>
    <table border="1">
        <tr><th>Tag ID</th><th>Timestamp</th><th>User ID</th></tr>
        {% for row in history %}
        <tr><td>{{ row.tag_id }}</td><td>{{ row.timestamp }}</td><td>{{ row.user_id }}</td></tr>
        {% endfor %}
    </table>
</body>
</html>
'''

@app.route('/')
def index():
    history = RFIDLog.query.order_by(RFIDLog.id.desc()).all()
    status = "Running" if app.config['machine_running'] else ("Ready" if app.config['confirmed_uid'] else "Idle")
    return render_template_string(
        HTML_TEMPLATE,
        confirmed_uid=app.config['confirmed_uid'],
        pending_tag=app.config['pending_tag'],
        history=history,
        status=status
    )

@app.route('/set_uid', methods=['POST'])
def set_uid():
    uid = request.form.get('uid', '').strip()
    if uid:
        app.config['confirmed_uid'] = uid
    return redirect(url_for('index'))

@app.route('/confirm_tag', methods=['POST'])
def confirm_tag():
    user_choice = request.form.get('confirm')
    if user_choice == 'Yes':
        tag = app.config['pending_tag']
        timestamp = app.config['pending_timestamp']
        uid = app.config['confirmed_uid']
        if tag and timestamp and uid:
            new_entry = RFIDLog(tag_id=tag, timestamp=timestamp, user_id=uid)
            db.session.add(new_entry)
            db.session.commit()
            app.config['machine_running'] = True
            app.config['machine_end_time'] = time.time() + MACHINE_RUNTIME
            app.config['last_tag'] = tag
    app.config['pending_tag'] = None
    app.config['pending_timestamp'] = None
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=False)

